#!/bin/bash
#
# The MIT License (MIT)
# Copyright © 2016 Michał Dobaczewski <mdobak@gmail.com>
#

set -e

BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
IMAGES_TO_RUN="images/dnsmasq-server"

. $BASE_DIR/../src/util.sh
. $BASE_DIR/../src/vbox.sh
. $BASE_DIR/../src/dnsmasq.sh
. $BASE_DIR/../src/hosts.sh
. $BASE_DIR/../src/docker.sh
. $BASE_DIR/../src/nfs.sh
. $BASE_DIR/../src/config.sh

# Prints Docker ASCII logo.
show_banner ()
{
  printf '                                           \n'
  printf '                    ##        .            \n'
  printf '              ## ## ##       ==            \n'
  printf '           ## ## ## ##      ===            \n'
  printf '       /""""""""""""""""\\___/ ===         \n'
  printf '  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   \n'
  printf '       \\______ o          __/             \n'
  printf '         \\    \\        __/               \n'
  printf '          \\____\\______/                  \n'
  printf '                                           \n'
}

# Print help message.
show_help ()
{
  echo
  echo 'Usage: ./docker-dev-env [OPTIONS] [DIRECTORIES...]';
  echo
  echo 'Options:'
  echo
  echo '-h, --help                         Print help message.'
  echo '-v, --verbose                      Run with a lot of debugging output.'
  echo '-m, --mount-dir <dir>              The directory where a NFS folder will be mount.'
  echo '-d, --docker-machine <name>        Name of the Docker Machine. Default value: "default"'
  echo '--dev-env-only <flag>              Prevents any actions on containers not created by this script. Enabled by default.'
  echo '--debug                            Debug mode.'

  if is_mac; then
    echo '--setup-vbox-net <flag>            Configure the VirtualBox bridged network. Enabled by default.'
    echo '--setup-nfs-sharing <flag>         Configure the VirtualBox NFS. Enabled by default.'
  fi

  echo '--setup-containers-host <flag>     Configure the /etc/hosts file configuration on containers. Enabled by default.'
  echo '--setup-containers-dnsmasq <flag>  Configure the Dnsmasq on containers. Disabled by default .'
  echo '--setup-hosts <flag>               Configure the /etc/hosts file configuration on the host OS. Disabled by default.'
  echo '--setup-dnsmasq <flag>             Configure the Dnsmasq on the host OS. Enabled by default.'
  echo
  echo '<flag> - 0 or 1.'
  echo

  exit 0
}

# Parses a binary argument. If the argument is equal "1" will return $true.
# Otherwise $false.
#
# $1 - Argument to parse.
parse_binary_arg ()
{
  if [ $1 == "1" ]; then
    return $true;
  else
    return $false;
  fi
}

# Parses arguments passed to this script. Should be invoked with $@ as argument.
# An image's names to build are stored in IMAGES_TO_RUN.
parse_args ()
{
  while [[ $# > 0 ]]; do
    ARG="$1"

    if [[ $ARG == "-v" || $ARG == "--verbose" ]]; then
      VERBOSE=1
    elif [[ $ARG == "--debug" ]]; then
      set -x
    elif [[ $ARG == "-h" || $ARG == "--help" ]]; then
      SHOW_HELP=$true
    elif [[ $ARG == "-m" || $ARG == "--mount-dir" ]]; then
      shift
      MOUNT_DIR=$1
    elif [[ $ARG == "-d" || $ARG == "--docker-machine" ]]; then
      shift
      DOCKER_MACHINE_NAME=$1
    elif [[ $ARG == "--dev-env-only" ]]; then
      shift
      parse_binary_arg $1
      SETUP_ONLY_DEV_ENV_CONTAINERS=$?
    elif is_mac && [[ $ARG == "--setup-vbox-net" ]]; then
      shift
      parse_binary_arg $1
      SETUP_VBOX_NETWORK=$?
    elif is_mac && [[ $ARG == "--setup-nfs-sharing" ]]; then
      shift
      parse_binary_arg $1
      SETUP_VBOX_NFS_SHARING=$?
    elif [[ $ARG == "--setup-containers-host" ]]; then
      shift
      parse_binary_arg $1
      SETUP_CONTAINERS_HOSTS=$?
    elif [[ $ARG == "--setup-containers-dnsmasq" ]]; then
      shift
      parse_binary_arg $1
      SETUP_CONTAINERS_DNSMASQ=$?
    elif [[ $ARG == "--setup-hosts" ]]; then
      shift
      parse_binary_arg $1
      SETUP_HOST_HOSTS=$?
    elif [[ $ARG == "--setup-dnsmasq" ]]; then
      shift
      parse_binary_arg $1
      SETUP_HOST_DNSMASQ=$?
    else
      IMAGES_TO_RUN="$IMAGES_TO_RUN $ARG"
    fi

    shift
  done
}

# Takes one argument, a variable name and stores in it path where the Docker
# volumes will be mounted.
#
# $1 - Variable name.
setup_mount_dir ()
{
  local _MOUNT_DIR=""

  if is_mac; then
    _MOUNT_DIR=$MACOS_MOUNT_DIR
  elif is_linux; then
    _MOUNT_DIR=$LINUX_MOUNT_DIR
  fi

  mkdir -p $_MOUNT_DIR
  eval "$1=$_MOUNT_DIR"

  echo_log "The Docker volumes will be mounted in $_MOUNT_DIR"
}

# Runs image.sh scripts stored in an image directory which builds or starts
# the Docker images. Images to build are defined in an IMAGES_TO_RUN variable.
build_images ()
{
  local MOUNT_DIR=$1
  local IMAGES_TO_RUN_WITH_DEPS=""

  shift 1

  while : ; do
    local IMAGES_TO_RUN_STR_SIZE=${#IMAGES_TO_RUN}

    for IMAGE_DIR in $IMAGES_TO_RUN; do
      local DIR=$IMAGE_DIR
      local REQUIRE=""

      if ! [[ -f $DIR/DevEnvConf ]]; then
        echo_fatal "The configuration $DIR/DevEnvConf file do not exists!"
      fi

      . $DIR/DevEnvConf

      for DEP_IMAGE_DIR in $REQUIRE; do
        IMAGES_TO_RUN_WITH_DEPS="$IMAGES_TO_RUN_WITH_DEPS $DIR/$DEP_IMAGE_DIR"
      done

      IMAGES_TO_RUN_WITH_DEPS="$IMAGES_TO_RUN_WITH_DEPS $IMAGE_DIR"
      IMAGES_TO_RUN_WITH_DEPS=$( awk 'BEGIN{RS=ORS=" "}!a[$0]++' <<<$IMAGES_TO_RUN_WITH_DEPS )
    done

    IMAGES_TO_RUN=$IMAGES_TO_RUN_WITH_DEPS
    IMAGES_TO_RUN_WITH_DEPS=""

    # If the size of the $IMAGES_TO_RUN variable is same as in last time there
    # is no new images to check.
    if [[ $IMAGES_TO_RUN_STR_SIZE -eq ${#IMAGES_TO_RUN} ]]; then
      break;
    fi
  done

  echo_log "Images to build: ${IMAGES_TO_RUN:0:${#IMAGES_TO_RUN}-2}"

  for IMAGE_DIR in $IMAGES_TO_RUN; do
    local DIR=$IMAGE_DIR

    local NAME=""
    local ARGS=""
    local IMAGE=""
    local HOSTNAME=""
    local REQUIRE=""

    . $DIR/DevEnvConf

    if [[ -z $IMAGE ]]; then
      IMAGE=$NAME
    fi

    if [[ -z $HOSTNAME ]]; then
      HOSTNAME=$NAME
    fi

    echo_step "Starting the \"$NAME\" container"
    exec_step setup_dev_container $NAME $HOSTNAME "$DIR" $IMAGE $ARGS
  done
}

show_banner
parse_args $@

if [[ $SHOW_HELP == $true ]]; then
  show_help
fi

check_os_support
check_requirements
check_root

if is_mac; then
  check_sudo
fi

setup_mount_dir MOUNT_DIR

if is_mac && ! is_docker_machine_exists $DOCKER_MACHINE_NAME; then
  echo_step "Creating the Docker Machine"
  exec_step create_docker_machine $DOCKER_MACHINE_NAME
fi

if is_mac; then
  echo_step "Regenerating the Docker Machine certificates"
  exec_step regenerate_docker_machine_certs $DOCKER_MACHINE_NAME
fi

if is_mac && [[ $SETUP_VBOX_NETWORK == $true ]]; then
  echo_step "Adding a bridged network card to the VirtualBox"
  exec_step setup_vbox_network $DOCKER_MACHINE_NAME

  echo_step "Adding a gateway rule for the Docker Machine"
  exec_step setup_vbox_gw $DOCKER_MACHINE_NAME
fi

if is_mac && [[ $SETUP_VBOX_NFS_SHARING == $true ]]; then
  echo_step "Configuring NFS sharing on the host OS"
  exec_step setup_macos_nfsd $DOCKER_MACHINE_NAME $MOUNT_DIR

  echo_step "Configuring NFS sharing on the Docker Machine"
  exec_step setup_docker_machine_nfs_mount $DOCKER_MACHINE_NAME $MOUNT_DIR
fi

build_images $MOUNT_DIR $@

if [[ $SETUP_CONTAINERS_DNSMASQ == $true ]]; then
  echo_step "Configuring the Dnsmasq in containers"
  exec_step setup_containers_dnsmasq $SETUP_ONLY_DEV_ENV_CONTAINERS
fi

if [[ $SETUP_CONTAINERS_HOSTS == $true ]]; then
  echo_step "Configuring the /etc/hosts file in containers"
  exec_step setup_containers_host_files $SETUP_ONLY_DEV_ENV_CONTAINERS
fi

if [[ $SETUP_HOST_DNSMASQ == $true ]]; then
  echo_step "Configuring the Dnsmasq on the host OS"
  exec_step setup_host_dnsmasq
fi

if [[ $SETUP_HOST_HOSTS == $true ]]; then
  echo_step "Configuring the /etc/hosts file on the host OS"
  exec_step setup_host_file
fi

echo_step "Configuring the dnsmasq-server"
exec_step setup_dnsmasq_config

echo_step "Configuring the /etc/resolv.conf file in containers"
exec_step setup_dnsmasq_resolv $SETUP_ONLY_DEV_ENV_CONTAINERS

docker_remove_untagged_images

echo
echo_success "All done!"
echo

#!/bin/bash
#
# The MIT License (MIT)
# Copyright © 2016 Michał Dobaczewski <mdobak@gmail.com>
#

BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
IMAGES_TO_RUN="images/dnsmasq-server"

. $BASE_DIR/../src/util.sh
. $BASE_DIR/../src/vbox.sh
. $BASE_DIR/../src/dnsmasq.sh
. $BASE_DIR/../src/hosts.sh
. $BASE_DIR/../src/docker.sh
. $BASE_DIR/../src/config.sh

# Prints Docker ASCII logo.
show_banner ()
{
  printf '                                           \n'
  printf '                    ##        .            \n'
  printf '              ## ## ##       ==            \n'
  printf '           ## ## ## ##      ===            \n'
  printf '       /""""""""""""""""\\___/ ===         \n'
  printf '  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   \n'
  printf '       \\______ o          __/             \n'
  printf '         \\    \\        __/               \n'
  printf '          \\____\\______/                  \n'
  printf '                                           \n'
}

# Print help message.
show_help ()
{
  echo
  echo 'Usage: ./docker-dev-env [OPTIONS] [DIRECTORIES...]';
  echo
  echo 'Options:'
  echo
  echo '-h, --help                        Print help message.'
  echo '-v, --verbose                     Run with a lot of debugging output.'
  echo '-m, --mount-dir <dir>             The directory where a NFS folder will be mount.'
  echo '-H, --hostname-suffix <suffix>    The suffix appended to hostnames. Default ".loc".'
  echo '--setup-vbox-net <flag>           Configure the VirtualBox bridged network. Default enabled.'
  echo '--setup-vbox-nfs-sharing <flag>   Configure the VirtualBox NFS. Default enabled.'
  echo '--setup-containers-host <flag>    Configure the /etc/hosts file configuration on containers. Default enabled.'
  echo '--setup-containers-dnsmasq <flag> Configure the Dnsmasq on containers. Default disabled.'
  echo '--setup-hosts <flag>              Configure the /etc/hosts file configuration on the host OS. Default disabled.'
  echo '--setup-dnsmasq <flag>            Configure the Dnsmasq on the host OS. Default enabled.'
  echo
  echo '<flag> - Binary value, 0 or 1.'
  echo

  exit 0
}

# Parses a binary argument. If the argument is equal "1" will return $true.
# Otherwise $false.
#
# $1 - Argument to parse.
parse_binary_arg ()
{
  if [ $1 == "1" ]; then
    return $true;
  else
    return $false;
  fi
}

# Parses arguments passed to this script. Should be invoked with $@ as argument.
# An image's names to build are stored in IMAGES_TO_RUN.
parse_args ()
{
  while [[ $# > 0 ]]; do
    ARG="$1"

    if [[ $ARG == "-v" || $ARG == "--verbose" ]]; then
      VERBOSE=1
    elif [[ $ARG == "-h" || $ARG == "--help" ]]; then
        SHOW_HELP=$true
    elif [[ $ARG == "-m" || $ARG == "--mount-dir" ]]; then
      shift
      MOUNT_DIR=$1
    elif [[ $ARG == "-H" || $ARG == "--hostname-suffix" ]]; then
      shift
      HOSTNAME_SUFFIX=$1
    elif [[ $ARG == "--setup-vbox-net" ]]; then
      shift
      SETUP_VBOX_NETWORK=$(parse_binary_arg $1)
    elif [[ $ARG == "--setup-nfs-sharing" ]]; then
      shift
      SETUP_VBOX_NFS_SHARING=$(parse_binary_arg $1)
    elif [[ $ARG == "--setup-containers-host" ]]; then
      shift
      SETUP_CONTAINERS_HOSTS=$(parse_binary_arg $1)
    elif [[ $ARG == "--setup-containers-dnsmasq" ]]; then
      shift
      SETUP_CONTAINERS_DNSMASQ=$(parse_binary_arg $1)
    elif [[ $ARG == "--setup-hosts" ]]; then
      shift
      SETUP_HOST_HOSTS=$(parse_binary_arg $1)
    elif [[ $ARG == "--setup-dnsmasq" ]]; then
      shift
      SETUP_HOST_DNSMASQ=$(parse_binary_arg $1)
    else
      IMAGES_TO_RUN="$IMAGES_TO_RUN $ARG"
    fi

    shift
  done
}

# Takes one argument, a variable name and stores in it path where the Docker
# volumes will be mounted.
#
# $1 - Variable name.
setup_mount_dir ()
{
  local _MOUNT_DIR=""

  if is_mac; then
    _MOUNT_DIR=$MACOS_MOUNT_DIR
  elif is_linux; then
    _MOUNT_DIR=$LINUX_MOUNT_DIR
  fi

  mkdir -p $_MOUNT_DIR
  eval "$1=$_MOUNT_DIR"

  echo_step_info "The Docker volumes will be mounted in $_MOUNT_DIR"
}

# Runs image.sh scripts stored in an image directory which builds or starts
# the Docker images. Images to build are defined in an IMAGES_TO_RUN variable.
build_images ()
{
  local MOUNT_DIR=$1
  shift 1

  for IMAGE_DIR in $IMAGES_TO_RUN; do
    if [[ $IMAGE_DIR == @* ]]; then
      DIR=$BASE_DIR/../images/${IMAGE_DIR:1}
    else
      DIR=$IMAGE_DIR
    fi

    if ! [[ -f $DIR/DevEnvConf ]]; then
      echo_fatal "Configuration file $DIR/DevEnvConf do not exists!"
    fi

    NAME=""
    ARGS=""
    IMAGE=""

    . $DIR/DevEnvConf

    if [[ -z $IMAGE ]]; then
      IMAGE=$NAME
    fi

    setup_dev_container "$NAME" "$DIR" $IMAGE $ARGS
  done
}

show_banner
parse_args $@

if [[ $SHOW_HELP == $true ]]; then
  show_help
fi

sudo_prompt
check_os_support
check_requirements
setup_mount_dir MOUNT_DIR

if [[ $SETUP_VBOX_NETWORK == $true ]]; then
  setup_vbox_network
  setup_vbox_gw
fi

if [[ $SETUP_VBOX_NFS_SHARING == $true ]]; then
  setup_vbox_nfs
fi

start_docker_machine
build_images $MOUNT_DIR $@


if [[ $SETUP_CONTAINERS_DNSMASQ == $true ]]; then
  setup_containers_dnsmasq
fi

if [[ $SETUP_CONTAINERS_HOSTS == $true ]]; then
  setup_containers_host_files
fi

if [[ $SETUP_HOST_DNSMASQ == $true ]]; then
  setup_host_dnsmasq
fi

if [[ $SETUP_HOST_HOSTS == $true ]]; then
  setup_host_file
fi

setup_dnsmasq_config
setup_dnsmasq_resolv

docker_remove_untagged_images

echo
echo_success "All done!"
echo
